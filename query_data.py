import argparse
from transformers import AutoTokenizer, AutoModel
from langchain_community.vectorstores import Chroma
from langchain.prompts import ChatPromptTemplate
import numpy as np

# Define the path for Chroma database
CHROMA_PATH = "chroma"

PROMPT_TEMPLATE = """
Answer the question based only on the following context:

{context}

---

Answer the question based on the above context: {question}
"""

# Load Hugging Face model and tokenizer for embeddings
tokenizer = AutoTokenizer.from_pretrained("bert-base-chinese")
model = AutoModel.from_pretrained("bert-base-chinese")

def generate_embeddings(text: str):
    inputs = tokenizer(text, return_tensors="pt", truncation=True, max_length=512)
    outputs = model(**inputs)
    # Flatten the embedding to a 1D list of floats
    return outputs.last_hidden_state.mean(dim=1).squeeze().tolist()


# Wrapper class to provide an `embed_query` method for Chroma
class EmbeddingFunctionWrapper:
    def embed_query(self, text):
        # Directly return the list generated by generate_embeddings
        return generate_embeddings(text)


def main():
    # Set up command-line arguments for the query
    parser = argparse.ArgumentParser()
    parser.add_argument("query_text", type=str, help="The query text.")
    args = parser.parse_args()
    query_text = args.query_text

    # Initialize the Chroma DB with the embedding wrapper
    embedding_function = EmbeddingFunctionWrapper()
    db = Chroma(persist_directory=CHROMA_PATH, embedding_function=embedding_function)

    # Search the DB with the query
    results = db.similarity_search_with_relevance_scores(query_text, k=3)
    if len(results) == 0:
        print("Unable to find matching results.")
        return

    # Format and display the results
    context_text = "\n\n---\n\n".join([doc.page_content for doc, _score in results])
    prompt_template = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)
    prompt = prompt_template.format(context=context_text, question=query_text)
    print(prompt)

if __name__ == "__main__":
    main()
